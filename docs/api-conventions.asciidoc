[[api-conventions]]
== API conventions

The {java-client} uses a very consistent code structure, using modern code
patterns that make complex requests easier to write and complex responses easier 
to process. This page explains these so that you quickly feel at home.

[discrete]
=== Package structure and namespace clients

The {es} API is large and is organized into feature groups, as can be seen in 
the {ref}/rest-apis.html[{es} API documentation].

The {java-client} follows this structure: feature groups are called “namespaces”,
and each namespace is located in a subpackage of 
`co.elastic.clients.elasticsearch`.

Each of the namespace clients can be accessed from the top level {es} client. The
only exceptions are the “search” and “document” APIs which are located in the `core`
subpackage and can be accessed on the main {es} client object.

The snippet below shows how to use the indices namespace client to create an 
index (the lambda syntax is <<builder-lambdas, explained below>>):

["source","java"]
--------------------------------------------------
// Create the "products" index
ElasticsearchClient client = ...
client.indices().create(c -> c.index("products"));
--------------------------------------------------

Namespace clients are very lightweight objects that can be created on the fly.


[discrete]
=== Method naming conventions

Classes in the {java-client} contain two kinds of methods and properties:

* Methods and properties that are part of the API, such as 
`ElasticsearchClient.search()` or `SearchResponse.maxScore()`. They are derived 
from their respective names in the {es} JSON API using the standard Java 
`camelCaseNaming` convention.

* Methods and properties that are part of the framework on which the Java API 
Client is built, such as `Query._kind()`. These methods and properties are
prefixed with an underscore to both avoid any naming conflicts with API names,
and as an easy way to distinguish the API from the framework.


[discrete]
[[builder-lambdas]]
=== Immutable objects, builders and builder lambdas

All data types in the {java-client} are immutable. Object creation uses the
https://www.informit.com/articles/article.aspx?p=1216151&seqNum=2[builder pattern] 
that was popularized in *Effective Java* in 2008.

["source","java"]
--------------------------------------------------
ElasticsearchClient client = ...
include-tagged::{doc-tests}/ApiConventionsTest.java[builders]
--------------------------------------------------

Note that a builder should not be reused after its `build()` method has been 
called.

Although this works nicely, having to instantiate builder classes and call the 
`build()` method is a bit verbose. So every property setter in the {java-client} also
accepts a lambda expression that takes a newly created builder as a parameter 
and returns a populated builder. The snippet above can also be written as:

["source","java"]
--------------------------------------------------
ElasticsearchClient client = ...
include-tagged::{doc-tests}/ApiConventionsTest.java[builder-lambdas]
--------------------------------------------------

This approach allows for much more concise code, and also avoids importing 
classes (and even remembering their names) since types are inferred from the 
method parameter signature.

Note in the above example that builder variables are only used to start a chain
of property setters. The names of these variables are therefore unimportant and
can be shortened to improve readability:

["source","java"]
--------------------------------------------------
ElasticsearchClient client = ...
include-tagged::{doc-tests}/ApiConventionsTest.java[builder-lambdas-short]
--------------------------------------------------


Builder lambdas become particularly useful with complex nested queries like the
one below, taken from the
{ref}/query-dsl-intervals-query.html[intervals query API documentation].

This example also highlights a useful naming convention for builder parameters in
deeply nested structures. For lambda expressions with a single argument, Kotlin
provides the implicit `it` parameter and Scala allows use of `_`. This can be approximated
in Java by using an underscore prefix followed by a number representing the depth
level (i.e. `_0`, `_1`, and so on). Not only does this remove the need to create
throw-away variable names, but it also improves code readability. Correct indentation
also allows the structure of the query to stand out.

["source","java"]
--------------------------------------------------
ElasticsearchClient client = ...
include-tagged::{doc-tests}/ApiConventionsTest.java[builder-intervals]
--------------------------------------------------
<1> Search results will be mapped to `SomeApplicationData` instances to
    be readily available to the application.

[discrete]
=== Lists and maps

[discrete]
==== Additive builder setters

Properties of type `List` and `Map` are exposed by object builders as a set of overloaded
additive-only methods that _update_ the property value, by appending to lists and adding
new entries to maps (or replacing existing ones).

Object builders create immutable objects, and this also applies to list and map properties
that are made immutable at object construction time.

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests}/ApiConventionsTest.java[collections]
--------------------------------------------------

[discrete]
==== List and map values are never `null`

The {es} API has a lot of optional properties. For single-valued properties, the {java-client}
represents missing optional values as `null`. Applications therefore have to null-check
optional values before using them.

For lists and maps however, applications often only care about whether they're empty or not,
or even just iterate on their content. Using `null` values is then cumbersome. To avoid this,
{java-client} collection properties are never `null`, and missing optional collections are
returned as an empty collection.

If you ever need to distinguish between a missing (undefined) optional collection and an
effectively-empty collection returned by {es}, the `ApiTypeHelper` class provides a utility
method to distinguish them:

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests}/ApiConventionsTest.java[optional-collections]
--------------------------------------------------


[discrete]
=== Variant types

The {es} API has a lot of variant types: queries, aggregations, field mappings, 
analyzers, and so on. Finding the correct class name in such large collections 
can be challenging.

The {java-client} builders make this easy: the builders for variant types, such as
`Query`, have methods for each of the available implementations. We’ve seen this
in action above with `intervals` (a kind of query) and `allOf`, `match` and 
`anyOf` (various kinds of intervals).

This is because variant objects in the {java-client} are implementations of a
“tagged union”: they contain the identifier (or tag) of the variant they hold
and the value for that variant. For example, a `Query` object can contain an 
`IntervalsQuery` with tag `intervals`, a `TermQuery` with tag `term`, and so on. 
This approach allows writing fluent code where you can let the IDE completion 
features guide you to build and navigate complex nested structures:

Variant builders have setter methods for every available implementation. They
use the same conventions as regular properties and accept both a builder lambda
expression and a ready-made object of the actual type of the variant. Here’s an
example to build a term query:

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests}/ApiConventionsTest.java[variant-creation]
--------------------------------------------------
<1> Choose the `term` variant to build a term query.
<2> Build the terms query with a builder lambda expression.
<3> Build the `Query` that now holds a `TermQuery` object of kind `term`.

Variant objects have getter methods for every available implementation. These
methods check that the object actually holds a variant of that kind and return
the value downcasted to the correct type. They throw an `IllegalStateException`
otherwise. This approach allows writing fluent code to traverse variants.

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests}/ApiConventionsTest.java[variant-navigation]
--------------------------------------------------

Variant objects also provide information on the variant kind they currently hold:

* with `is` methods for each of the variant kinds: `isTerm()`, `isIntervals()`, `isFuzzy()`, etc.

* with a nested `Kind` enumeration that defines all variant kinds.

This information can then be used to navigate down into specific variants after checking
their actual kind:

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests}/ApiConventionsTest.java[variant-kind]
--------------------------------------------------
<1> Test if the variant is of a specific kind.
<2> Test a larger set of variant kinds.
<3> Get the kind and value held by the variant object.

[discrete]
=== Blocking and asynchronous clients

API clients come in two flavors: blocking and asynchronous. All methods on 
asynchronous clients return a standard `CompletableFuture`.

Both flavors can be used at the same time depending on your needs, sharing the 
same transport object:

["source","java"]
--------------------------------------------------
ElasticsearchTransport transport = ...

include-tagged::{doc-tests}/ApiConventionsTest.java[blocking-and-async]
--------------------------------------------------

[discrete]
=== Exceptions

Client methods can throw two kinds of exceptions:

* Requests that were received by the {es} server but that were rejected 
(validation error, server internal timeout exceeded, etc) will produce an 
`ElasticsearchException`. This exception contains details about the error,
provided by {es}.

* Requests that failed to reach the server (network error, server unavailable,
etc) will produce a `TransportException`. That exception's cause is the exception
thrown by the lower-level implementation. In the case of the `RestClientTransport`
it will be a `ResponseException` that contains the low level HTTP response.

[discrete]
=== Object life cycles

There are five kinds of objects in the {java-client} with different life cycles:


**Object mapper**::
Stateless and thread-safe, but can be costly to create. 
It’s usually a singleton that is created at application startup and used to 
create the transport.

**Transport**:: 
Thread-safe, holds network resources through the underlying HTTP client. A 
transport object is associated with an {es} cluster and has to be explicitly 
closed to release the underlying resources such as network connections.

**Clients**:: 
Immutable, stateless and thread-safe.
These are very lightweight objects that just wrap a transport and provide API 
endpoints as methods.

**Builders**:: 
Mutable, non thread-safe. 
Builders are transient objects that should not be reused after calling 
`build()`.

**Requests & other API objects**::
Immutable, thread-safe. 
If your application uses the same request or same parts of a request over and 
over, these objects can be prepared in advance and reused across multiple calls 
over multiple clients with different transports.
