[[connecting]]
=== Connecting

The {java-client} is structured around three main components:

* **API client classes**. These provide strongly typed data structures and 
methods for {es} APIs. Since the {es} API is large, it is structured in feature 
groups (also called “namespaces”), each having its own client class. {es} core 
features are implemented in the `ElasticsearchClient` class.
* **A JSON object mapper**. This maps your application classes to JSON and 
seamlessly integrates them with the API client.
* **A transport layer implementation**. This is where all HTTP request handling 
takes place.

This code snippet creates and wires together these three components:

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests-src}/getting_started/ConnectingTest.java[create-client]
--------------------------------------------------

Authentication is managed by the <<java-rest-low>>. For further details on 
configuring authentication, refer to 
{java-api-client}/_basic_authentication.html[its documentation].

[discrete]
==== Your first request

The code snippet below searches all items from a “product” index whose name 
matches “bicycle” and return them as instances of a `Product` application class.

It illustrates the use of fluent functional builders to write search queries as 
concise DSL-like code. This pattern is explained in more detail in 
<<api-conventions>>.

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests-src}/getting_started/ConnectingTest.java[first-request]
--------------------------------------------------

[discrete]
[[using-a-secure-connection]]
==== Using a secure connection

The <<java-rest-low>> documentation explains how to set up encrypted communications in detail.

In self-managed installations, Elasticsearch will start with security features like authentication and TLS enabled. To connect to the Elasticsearch cluster you’ll need to configure the {java-client} to use HTTPS with the generated CA certificate in order to make requests successfully.

When you start Elasticsearch for the first time you’ll see a distinct block like the one below in the output from Elasticsearch (you may have to scroll up if it’s been a while):

["source","xml"]
----------------------------------------------------------------
-> Elasticsearch security features have been automatically configured!
-> Authentication is enabled and cluster connections are encrypted.

->  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):
  lhQpLELkjkrawaBoaz0Q

->  HTTP CA certificate SHA-256 fingerprint:
  a52dd93511e8c6045e21f16654b77c9ee0f34aea26d9f40320b531c474676228
...
----------------------------------------------------------------

Note down the elastic user password and HTTP CA fingerprint for the next sections. In the examples below they will be stored in the variables `password` and `fingerprint` respectively.

Depending on the context, you have two options for verifying the HTTPS connection: either verifying with the CA certificate itself or using the CA certificate fingerprint. For both cases, the {java-client}'s `TransportUtils` class provides convenience methods to easily create an `SSLContext`.

[discrete]
===== Verifying HTTPS with a certificate fingerprint

This method of verifying the HTTPS connection uses the certificate fingerprint value noted down earlier.

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests-src}/getting_started/ConnectingTest.java[create-secure-client-fingerprint]
--------------------------------------------------
<1> Create an `SSLContext` with the certificate fingerprint.
<2> Set up authentication.
<3> Do not forget to set the protocol to `https`!
<4> Configure the http client with the SSL and authentication configurations.

Note that the certificate fingerprint can also be calculated using `openssl x509` with the certificate file:
["source","bash"]
--------------------------------------------------
openssl x509 -fingerprint -sha256 -noout -in /path/to/http_ca.crt
--------------------------------------------------

If you don’t have access to the generated CA file from Elasticsearch you can use the following script to output the root CA fingerprint of the Elasticsearch instance with `openssl s_client`:

["source","bash"]
--------------------------------------------------
openssl s_client -connect localhost:9200 -servername localhost -showcerts </dev/null 2>/dev/null \
  | openssl x509 -fingerprint -sha256 -noout -in /dev/stdin
--------------------------------------------------

[discrete]
===== Verifying HTTPS with a CA certificate

The generated root CA certificate can be found in the `certs` directory in your Elasticsearch config location. If you’re running Elasticsearch in Docker there is {es-docs}/docker.html[additional documentation] for retrieving the CA certificate.

Once you have made the `http_ca.crt` file available to your application, you can use it to set up the client:

["source","java"]
--------------------------------------------------
include-tagged::{doc-tests-src}/getting_started/ConnectingTest.java[create-secure-client-cert]
--------------------------------------------------
<1> Create an `SSLContext` with the `http_ca.crt` file.
<2> Set up authentication.
<3> Do not forget to set the protocol to `https`!
<4> Configure the http client with the SSL and authentication configurations.

{doc-tests-blurb}
